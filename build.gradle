plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

dependencies {
    api project(':com.arianesline.cavelib.api')
    api project(':com.arianesline.ariane.plugin.api')
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")
    implementation("org.glassfish.jaxb:jaxb-runtime:4.0.5")
    implementation("jakarta.json:jakarta.json-api:2.1.3")
    implementation ('org.eclipse.parsson:parsson:1.1.4')
    implementation("org.glassfish:jakarta.json:2.0.1")
    
    // Testing dependencies
    testImplementation platform('org.junit:junit-bom:5.10.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.platform:junit-platform-suite-engine:1.10.1'
    
    // JavaFX testing support
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
}

tasks.register('buildDebug') {
    group = 'build'
    description = 'Builds the SpeleoDB plugin with debug information enabled and localhost URLs'
    
    doFirst {
        println 'Starting SpeleoDB plugin debug build with localhost configuration...'
        
        // Create debug configuration file
        def debugConfigDir = file("src/main/resources")
        debugConfigDir.mkdirs()
        def debugConfigFile = new File(debugConfigDir, "debug.properties")
        debugConfigFile.text = "debug.mode=true\n"
        
        // Configure debug settings for compilation
        tasks.withType(JavaCompile) {
            options.debug = true
            options.debugOptions.debugLevel = "source,lines,vars"
            options.compilerArgs += ['-g', '-Xlint:all', '-parameters']
        }
    }
    
    dependsOn 'compileJava', 'processResources', 'classes', 'jar'
    
    doLast {
        println 'SpeleoDB plugin debug build completed with localhost URLs enabled'
        println 'Debug configuration file created at: src/main/resources/debug.properties'
    }
    
    finalizedBy restoreVersionPlaceholders
}

tasks.register('buildProduction') {
    group = 'build'
    description = 'Builds the SpeleoDB plugin for production with remote URLs'
    
    doFirst {
        println 'Starting SpeleoDB plugin production build...'
        
        // Remove debug configuration file if it exists
        def debugConfigFile = file("src/main/resources/debug.properties")
        if (debugConfigFile.exists()) {
            debugConfigFile.delete()
        }
    }
    
    dependsOn 'compileJava', 'processResources', 'classes', 'jar'
    
    doLast {
        println 'SpeleoDB plugin production build completed'
    }
    
    finalizedBy restoreVersionPlaceholders
}

test {
    useJUnitPlatform()
}

// Task to generate version based on build date
tasks.register('generateVersion') {
    group = 'build'
    description = 'Generates version string based on current date in CalVer format (YYYY.MM.DD)'
    
    doLast {
        def today = new Date()
        def versionString = today.format('yyyy.MM.dd')
        def versionDisplay = "v${versionString}"
        
        println "Generating version: ${versionString} (display: ${versionDisplay})"
        
        // Read the constants file
        def constantsFile = file('src/main/java/com/arianesline/ariane/plugin/speleodb/SpeleoDBConstants.java')
        def content = constantsFile.text
        
        // Replace the version constants
        content = content.replaceAll(
            /public static final String VERSION = null;/,
            "public static final String VERSION = \"${versionString}\";"
        )
        
        // Write back to file
        constantsFile.text = content
        
        println "Updated SpeleoDBConstants.java with version: ${versionString}"
    }
}

// Task to restore null values after build
tasks.register('restoreVersionPlaceholders') {
    group = 'build'
    description = 'Restores null placeholders in version constants after build'
    
    doLast {
        println "Restoring version placeholders to null..."
        
        // Read the constants file
        def constantsFile = file('src/main/java/com/arianesline/ariane/plugin/speleodb/SpeleoDBConstants.java')
        def content = constantsFile.text
        
        // Restore the version constants to null
        content = content.replaceAll(
            /public static final String VERSION = "[^"]*";/,
            "public static final String VERSION = null;"
        )
        
        // Write back to file
        constantsFile.text = content
        
        println "Restored version constants to null placeholders"
    }
}

// Make compileJava depend on generateVersion so version is always up to date
compileJava.dependsOn generateVersion

// Completely override the build task to exclude tests
build {
    // Clear all dependencies and set only what we want
    dependsOn.clear()
    dependsOn assemble
    
    doFirst {
        println 'Building without running tests. Use "./gradlew test" to run tests explicitly.'
    }
    
    finalizedBy restoreVersionPlaceholders
}

// Create a separate task for build with tests
tasks.register('buildWithTests') {
    group = 'build'
    description = 'Build and run tests'
    dependsOn assemble, check
    finalizedBy restoreVersionPlaceholders
}

tasks.register('help-build') {
    group = 'help'
    description = 'Shows available build and test tasks'
    
    doLast {
        println ''
        println '=== SpeleoDB Plugin Build Tasks ==='
        println ''
        println 'BUILD TASKS (no tests):'
        println '  ./gradlew build           - Build without running tests'
        println '  ./gradlew buildDebug      - Build with debug configuration'
        println '  ./gradlew buildProduction - Build for production'
        println '  ./gradlew assemble        - Assemble the JAR file'
        println ''
        println 'TEST TASKS:'
        println '  ./gradlew test            - Run all tests'
        println '  ./gradlew check           - Run tests and checks'
        println '  ./gradlew runAllTests     - Run all unit tests'
        println '  ./gradlew runControllerTests - Run controller tests only'
        println '  ./gradlew runServiceTests - Run service tests only'
        println '  ./gradlew runHttpTests    - Run HTTP tests only'
        println '  ./gradlew runPluginTests  - Run plugin tests only'
        println ''
        println 'COMBINED:'
        println '  ./gradlew buildWithTests  - Build and run tests in one command'
        println '  ./gradlew build test      - Build and then run tests (separate tasks)'
        println ''
        println 'CLEAN STATE TASKS:'
        println '  ./gradlew clean           - Clean all build outputs'
        println '  ./gradlew clean build     - Clean and build from scratch (no tests)'
        println '  ./gradlew clean test      - Clean and run tests from scratch'
        println '  ./gradlew clean buildWithTests - Clean, build, and test from scratch'
        println '  ./gradlew clean build test - Clean, build, and test (separate tasks)'
        println '  ./gradlew clean buildDebug - Clean and build with debug config'
        println '  ./gradlew clean buildProduction - Clean and build for production'
        println ''
        println 'USEFUL COMBINATIONS:'
        println '  ./gradlew clean assemble  - Clean and create JAR only'
        println '  ./gradlew --refresh-dependencies build - Refresh deps and build'
        println '  ./gradlew build --info    - Build with detailed output'
        println '  ./gradlew test --info     - Run tests with detailed output'
        println ''
        println 'TIP: Use "clean" before any task to ensure a fresh build state.'
        println ''
    }
}

tasks.register('runAllTests') {
    group = 'verification'
    description = 'Runs all unit tests using JUnit 5'
    
    dependsOn test
    
    doLast {
        println 'All unit tests completed successfully!'
    }
}

tasks.register('runHttpTests', JavaExec) {
    group = 'verification'
    description = 'Runs HTTPRequestMultipartBody tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.HTTPRequestMultipartBodyTest'
    
    doLast {
        println 'HTTPRequestMultipartBody tests completed successfully!'
    }
}

tasks.register('runServiceTests', JavaExec) {
    group = 'verification'
    description = 'Runs SpeleoDBService tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.SpeleoDBServiceTest'
    
    doLast {
        println 'SpeleoDBService tests completed successfully!'
    }
}

tasks.register('runControllerTests', JavaExec) {
    group = 'verification'
    description = 'Runs SpeleoDBController tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.SpeleoDBControllerTest'
    
    doLast {
        println 'SpeleoDBController tests completed successfully!'
    }
}

tasks.register('runControllerStateTests', JavaExec) {
    group = 'verification'
    description = 'Runs SpeleoDBController state management tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariana.plugin.speleodb.SpeleoDBControllerStateTest'
    
    doLast {
        println 'SpeleoDBController state tests completed successfully!'
    }
}

tasks.register('runPluginTests', JavaExec) {
    group = 'verification'
    description = 'Runs SpeleoDBPlugin tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.SpeleoDBPluginTest'
    
    doLast {
        println 'SpeleoDBPlugin tests completed successfully!'
    }
}

tasks.register('testDebug', JavaExec) {
    group = 'verification'
    description = 'Runs tests with debug mode enabled'
    
    dependsOn buildDebug, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.HTTPRequestMultipartBodyTest'
    
    doLast {
        println 'HTTPRequestMultipartBody tests completed in debug mode!'
    }
}
