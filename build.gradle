plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

// Target Java 21 exclusively - Same as Ariane
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

dependencies {
    api project(':com.arianesline.cavelib.api')
    api project(':com.arianesline.ariane.plugin.api')
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")
    implementation("org.glassfish.jaxb:jaxb-runtime:4.0.5")
    implementation("jakarta.json:jakarta.json-api:2.1.3")
    implementation ('org.eclipse.parsson:parsson:1.1.4')
    implementation("org.glassfish:jakarta.json:2.0.1")
    
    // Testing dependencies
    testImplementation platform('org.junit:junit-bom:5.10.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // JavaFX testing support
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
}


tasks.register('help-build') {
    group = 'help'
    description = 'Shows available build and test tasks'
    
    doLast {
        println ''
        println '=== SpeleoDB Plugin Build Tasks ==='
        println ''
        println 'BUILD TASKS (no tests):'
        println '  ./gradlew build           - Build without running tests'
        println '  ./gradlew assemble        - Assemble the JAR file'
        println ''
        println 'TEST TASKS:'
        println '  ./gradlew test            - Run all tests'
        println '  ./gradlew check           - Run tests and checks'
        println ''
        println 'COMBINED:'
        println '  ./gradlew build test      - Build and then run tests (separate tasks)'
        println ''
        println 'CLEAN STATE TASKS:'
        println '  ./gradlew clean           - Clean all build outputs'
        println '  ./gradlew clean build     - Clean and build from scratch (no tests)'
        println '  ./gradlew clean test      - Clean and run tests from scratch'
        println '  ./gradlew clean build test - Clean, build, and test (separate tasks)'
        println ''
        println 'USEFUL COMBINATIONS:'
        println '  ./gradlew clean assemble  - Clean and create JAR only'
        println '  ./gradlew --refresh-dependencies build - Refresh deps and build'
        println '  ./gradlew build --info    - Build with detailed output'
        println '  ./gradlew test --info     - Run tests with detailed output'
        println ''
        println 'TIP: Use "clean" before any task to ensure a fresh build state.'
        println ''
    }
}
// Task to clean build/libs directory before build
tasks.register('cleanBuildArtifacts') {
    group = 'build'
    description = 'Cleans the build/libs directory before building'
    
    doFirst {
        def libsDir = file('build/libs')
        if (libsDir.exists()) {
            println "Cleaning build/libs directory..."
            libsDir.listFiles().each { file ->
                if (file.isFile()) {
                    println "Deleting: ${file.name}"
                    file.delete()
                }
            }
            println "build/libs directory cleaned"
        } else {
            println "build/libs directory does not exist, skipping clean"
        }
    }
}

// Task to generate version based on build date
tasks.register('generateReleaseVersion') {
    group = 'build'
    description = 'Generates version string based on current date in CalVer format (YYYY.MM.DD)'
    
    doFirst {
        def versionString = project.calVerVersion
        def versionDisplay = "v${versionString}"
        
        println "Generating version: ${versionString} (display: ${versionDisplay})"
        
        // Read the constants file
        def constantsFile = file('src/main/java/org/speleodb/ariane/plugin/speleodb/SpeleoDBConstants.java')
        def content = constantsFile.text
        
        // Replace the version constants - match VERSION in main class, not in nested classes
        // Look for VERSION after the version comment block
        content = content.replaceFirst(
            /(?s)(SpeleoDB Plugin Version.*?\n\s*\*\/\s*\n)(\s*public static final String VERSION = )null;/,
            "\$1\$2\"${versionString}\";"
        )
        
        // Write back to file
        constantsFile.text = content
        
        println "Updated SpeleoDBConstants.java with version: ${versionString}"
    }
}

// Task to enable test mode for isolated preferences
tasks.register('enableTestMode') {
    group = 'test'
    description = 'Enables test mode to isolate test preferences from user preferences'
    
    doFirst {
        println "Enabling test mode for preference isolation..."
        
        // Read the constants file
        def constantsFile = file('src/main/java/org/speleodb/ariane/plugin/speleodb/SpeleoDBConstants.java')
        def content = constantsFile.text
        
        // Enable TEST_MODE
        content = content.replaceFirst(
            /public static final boolean TEST_MODE = false;/,
            "public static final boolean TEST_MODE = true;"
        )
        
        // Write back to file
        constantsFile.text = content
        
        // Force recompilation by marking outputs as out of date
        tasks.compileJava.outputs.upToDateWhen { false }
        tasks.compileTestJava.outputs.upToDateWhen { false }
        
        println "Test mode ENABLED - tests will use isolated preferences"
    }
}

// Configure test task to ensure proper ordering
test {
    useJUnitPlatform()
    dependsOn generateReleaseVersion, enableTestMode, compileJava, compileTestJava
}

// Update the check task - only enable test mode when running checks/tests
check {
    dependsOn generateReleaseVersion, enableTestMode
}

// Configure the build task to NOT run tests/checks by default
build {
    dependsOn.clear()
    dependsOn assemble
    
    doFirst {
        println 'Building without running tests. Use "./gradlew test" or "./gradlew check" to run tests.'
    }
}

// Cleanup mechanism using gradle.buildFinished
// This ALWAYS runs at the end of the build, even if the build fails or is aborted
// This is the ONLY place where TEST_MODE and VERSION are reset
gradle.buildFinished {
    def constantsFile = file('src/main/java/org/speleodb/ariane/plugin/speleodb/SpeleoDBConstants.java')
    if (constantsFile.exists()) {
        def content = constantsFile.text
        def hasChanges = false
        
        // Reset TEST_MODE if needed
        if (content.contains('public static final boolean TEST_MODE = true;')) {
            println "Build finished - ensuring test mode is disabled..."
            content = content.replaceFirst(
                /public static final boolean TEST_MODE = true;/,
                "public static final boolean TEST_MODE = false;"
            )
            hasChanges = true
            println "Test mode DISABLED after build completion"
        }
        
        // Reset VERSION if needed
        if (content =~ /(?s)SpeleoDB Plugin Version.*?\n\s*\*\/\s*\n\s*public static final String VERSION = "[^"]*";/) {
            println "Build finished - ensuring version is reset to null..."
            content = content.replaceFirst(
                /(?s)(SpeleoDB Plugin Version.*?\n\s*\*\/\s*\n)(\s*public static final String VERSION = )"[^"]*";/,
                '$1$2null;'
            )
            hasChanges = true
            println "Version RESET to null after build completion"
        }
        
        if (hasChanges) {
            constantsFile.text = content
        }
    }
}

// Configure Java compiler optimizations for release builds
compileJava {
    // Make compileJava depend on generateReleaseVersion so version is always up to date
    dependsOn generateReleaseVersion, cleanBuildArtifacts

    options.compilerArgs += [
        '-Xlint:all',          // Enable all warnings (helps catch inefficiencies)
        '-Xlint:-serial',      // Disable serial warnings if not needed
        '-parameters'          // Preserve parameter names for better debugging
    ]
    options.encoding = 'UTF-8'
    options.debug = false      // Disable debug info for release builds

    // Ensure proper ordering: if both tasks run, enableTestMode must run first
    mustRunAfter enableTestMode
}

compileTestJava {
    mustRunAfter enableTestMode
}

// Store the CalVer version as a project property
ext.calVerVersion = new Date().format('yyyy.MM.dd')

// Configure jar task to use CalVer version in filename with ZIP compression
jar {
    dependsOn generateReleaseVersion
    archiveBaseName = 'org.speleodb.ariane.plugin.speleodb'
    archiveVersion = project.calVerVersion
    
    // Optimize JAR structure and compression
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    // Use most aggressive compression available in standard ZIP format
    entryCompression = ZipEntryCompression.DEFLATED
    zip64 = true  // Enable ZIP64 extensions for better compression
    
    // Add security and optimization manifest entries
    manifest {
        attributes(
            'Sealed': 'true',
            'Implementation-Title': 'SpeleoDB Ariane Plugin',
            'Implementation-Version': project.calVerVersion,
            'Implementation-Vendor': 'SpeleoDB Software',
            'Built-By': 'Jonathan Dekhtiar',
            'Build-Jdk': System.getProperty('java.version'),
            'Created-By': "Gradle ${gradle.gradleVersion}",
            'Multi-Release': 'false'  // Explicitly disable for clarity
        )
    }
    
    // Preserve file timestamps for better caching
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// Task to reset the 'Do not show again' preference for success GIF
tasks.register('resetSuccessGifPreference') {
    group = 'utilities'
    description = 'Resets the SpeleoDB preference that suppresses the success GIF (sets it back to false)'

    doLast {
        def suppressKey = 'SDB_SUPPRESS_SUCCESS_GIF'
        println "Resetting preference '${suppressKey}' to false..."
        try {
            // Use explicit absolute node path matching the controller package
            def prefs = java.util.prefs.Preferences.userRoot().node('/org/speleodb/ariane/plugin/speleodb')
            prefs.putBoolean(suppressKey, false)
            prefs.flush()
            println "Preference '${suppressKey}' set to: " + prefs.getBoolean(suppressKey, false)
        } catch (Throwable t) {
            println "Failed to reset preference: ${t.message}"
            throw t
        }
    }
}
