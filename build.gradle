plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

dependencies {
    api project(':com.arianesline.cavelib.api')
    api project(':com.arianesline.ariane.plugin.api')
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")
    implementation("org.glassfish.jaxb:jaxb-runtime:4.0.5")
    implementation("jakarta.json:jakarta.json-api:2.1.3")
    implementation ('org.eclipse.parsson:parsson:1.1.4')
    implementation("org.glassfish:jakarta.json:2.0.1")
    
    // Testing dependencies
    testImplementation platform('org.junit:junit-bom:5.10.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register('buildDebug') {
    group = 'build'
    description = 'Builds the SpeleoDB plugin with debug information enabled and localhost URLs'
    
    doFirst {
        println 'Starting SpeleoDB plugin debug build with localhost configuration...'
        
        // Create debug configuration file
        def debugConfigDir = file("src/main/resources")
        debugConfigDir.mkdirs()
        def debugConfigFile = new File(debugConfigDir, "debug.properties")
        debugConfigFile.text = "debug.mode=true\n"
        
        // Configure debug settings for compilation
        tasks.withType(JavaCompile) {
            options.debug = true
            options.debugOptions.debugLevel = "source,lines,vars"
            options.compilerArgs += ['-g', '-Xlint:all', '-parameters']
        }
    }
    
    dependsOn 'build'
    
    doLast {
        println 'SpeleoDB plugin debug build completed with localhost URLs enabled'
        println 'Debug configuration file created at: src/main/resources/debug.properties'
    }
}

tasks.register('buildProduction') {
    group = 'build'
    description = 'Builds the SpeleoDB plugin for production with remote URLs'
    
    doFirst {
        println 'Starting SpeleoDB plugin production build...'
        
        // Remove debug configuration file if it exists
        def debugConfigFile = file("src/main/resources/debug.properties")
        if (debugConfigFile.exists()) {
            debugConfigFile.delete()
        }
    }
    
    dependsOn 'build'
    
    doLast {
        println 'SpeleoDB plugin production build completed'
    }
}

test {
    useJUnitPlatform()
}

tasks.register('runTests', JavaExec) {
    group = 'verification'
    description = 'Runs all unit tests'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.AllTestsRunner'
    
    doLast {
        println 'All unit tests completed successfully!'
    }
}

tasks.register('runHttpTests', JavaExec) {
    group = 'verification'
    description = 'Runs HTTPRequestMultipartBody tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.HTTPRequestMultipartBodyTest'
    
    doLast {
        println 'HTTPRequestMultipartBody tests completed successfully!'
    }
}

tasks.register('runServiceTests', JavaExec) {
    group = 'verification'
    description = 'Runs SpeleoDBService tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.SpeleoDBServiceTest'
    
    doLast {
        println 'SpeleoDBService tests completed successfully!'
    }
}

tasks.register('runControllerTests', JavaExec) {
    group = 'verification'
    description = 'Runs SpeleoDBController tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.SpeleoDBControllerTest'
    
    doLast {
        println 'SpeleoDBController tests completed successfully!'
    }
}

tasks.register('runControllerStateTests', JavaExec) {
    group = 'verification'
    description = 'Runs SpeleoDBController state management tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariana.plugin.speleodb.SpeleoDBControllerStateTest'
    
    doLast {
        println 'SpeleoDBController state tests completed successfully!'
    }
}

tasks.register('runPluginTests', JavaExec) {
    group = 'verification'
    description = 'Runs SpeleoDBPlugin tests only'
    
    dependsOn compileJava, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.SpeleoDBPluginTest'
    
    doLast {
        println 'SpeleoDBPlugin tests completed successfully!'
    }
}

tasks.register('testDebug', JavaExec) {
    group = 'verification'
    description = 'Runs tests with debug mode enabled'
    
    dependsOn buildDebug, compileTestJava
    
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.arianesline.ariane.plugin.speleodb.HTTPRequestMultipartBodyTest'
    
    doLast {
        println 'HTTPRequestMultipartBody tests completed in debug mode!'
    }
}
